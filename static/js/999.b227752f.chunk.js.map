{"version":3,"file":"static/js/999.b227752f.chunk.js","mappings":"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","sources":["admin/AdminLogs.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst AdminLogs = () => {\r\n  const [logs, setLogs] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [filter, setFilter] = useState('all'); // all, movie, user, error\r\n\r\n  useEffect(() => {\r\n    const fetchLogs = async () => {\r\n      setLoading(true);\r\n      \r\n      try {\r\n        // In a real app, this would be an API call\r\n        // const response = await fetch(`/api/admin/logs?filter=${filter}`);\r\n        // const data = await response.json();\r\n        \r\n        // Simulate API delay\r\n        await new Promise(resolve => setTimeout(resolve, 800));\r\n        \r\n        // Mock logs data\r\n        const mockLogs = [\r\n          { id: 1, type: 'movie_added', message: 'Movie \"The Shawshank Redemption\" was added', timestamp: '2023-10-25T14:32:10Z', user: 'admin@example.com' },\r\n          { id: 2, type: 'movie_updated', message: 'Movie \"The Godfather\" was updated', timestamp: '2023-10-24T09:15:22Z', user: 'admin@example.com' },\r\n          { id: 3, type: 'movie_deleted', message: 'Movie \"Pulp Fiction\" was deleted', timestamp: '2023-10-23T18:05:47Z', user: 'admin@example.com' },\r\n          { id: 4, type: 'user_registered', message: 'New user registered: johndoe@example.com', timestamp: '2023-10-22T11:42:33Z', user: 'system' },\r\n          { id: 5, type: 'login_success', message: 'User logged in successfully', timestamp: '2023-10-22T10:15:18Z', user: 'johndoe@example.com' },\r\n          { id: 6, type: 'login_error', message: 'Failed login attempt', timestamp: '2023-10-21T22:45:11Z', user: 'unknown' },\r\n          { id: 7, type: 'system_error', message: 'Database connection error', timestamp: '2023-10-21T16:32:45Z', user: 'system' },\r\n          { id: 8, type: 'movie_added', message: 'Movie \"Inception\" was added', timestamp: '2023-10-21T14:18:05Z', user: 'admin@example.com' },\r\n          { id: 9, type: 'system_backup', message: 'System backup completed successfully', timestamp: '2023-10-20T03:00:00Z', user: 'system' },\r\n          { id: 10, type: 'user_updated', message: 'User profile updated', timestamp: '2023-10-19T09:22:17Z', user: 'johndoe@example.com' },\r\n        ];\r\n        \r\n        // Apply filtering\r\n        const filteredLogs = filter === 'all' \r\n          ? mockLogs \r\n          : mockLogs.filter(log => {\r\n              if (filter === 'movie') return log.type.includes('movie');\r\n              if (filter === 'user') return log.type.includes('user') || log.type.includes('login');\r\n              if (filter === 'error') return log.type.includes('error');\r\n              return true;\r\n            });\r\n        \r\n        setLogs(filteredLogs);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching logs:', error);\r\n        setError('Failed to load activity logs. Please try again later.');\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchLogs();\r\n  }, [filter]);\r\n\r\n  const formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString('en-US', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  };\r\n\r\n  const getTypeLabel = (type) => {\r\n    if (type.includes('movie_added')) return 'Added';\r\n    if (type.includes('movie_updated')) return 'Updated';\r\n    if (type.includes('movie_deleted')) return 'Deleted';\r\n    if (type.includes('user_registered')) return 'User Registered';\r\n    if (type.includes('login_success')) return 'Login Success';\r\n    if (type.includes('login_error')) return 'Login Failed';\r\n    if (type.includes('system_error')) return 'System Error';\r\n    if (type.includes('system_backup')) return 'System Backup';\r\n    if (type.includes('user_updated')) return 'User Updated';\r\n    return 'Activity';\r\n  };\r\n\r\n  const getTypeBadgeColor = (type) => {\r\n    if (type.includes('added')) return 'bg-green-100 text-green-800 border-green-200';\r\n    if (type.includes('updated')) return 'bg-blue-100 text-blue-800 border-blue-200';\r\n    if (type.includes('deleted')) return 'bg-red-100 text-red-800 border-red-200';\r\n    if (type.includes('error')) return 'bg-red-100 text-red-800 border-red-200';\r\n    if (type.includes('login_success')) return 'bg-green-100 text-green-800 border-green-200';\r\n    if (type.includes('system')) return 'bg-purple-100 text-purple-800 border-purple-200';\r\n    if (type.includes('user')) return 'bg-yellow-100 text-yellow-800 border-yellow-200';\r\n    return 'bg-gray-100 text-gray-800 border-gray-200';\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"p-4\">\r\n        <h1 className=\"text-2xl font-bold mb-6\">Activity Logs</h1>\r\n        <div className=\"animate-pulse\">\r\n          <div className=\"h-10 bg-gray-200 rounded mb-6\"></div>\r\n          <div className=\"space-y-4\">\r\n            {[1, 2, 3, 4, 5].map(i => (\r\n              <div key={i} className=\"h-20 bg-gray-200 rounded\"></div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"p-4\">\r\n        <h1 className=\"text-2xl font-bold mb-6\">Activity Logs</h1>\r\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded\">\r\n          {error}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <h1 className=\"text-2xl font-bold mb-6\">Activity Logs</h1>\r\n      \r\n      <div className=\"mb-6\">\r\n        <div className=\"flex flex-wrap gap-2\">\r\n          <button\r\n            onClick={() => setFilter('all')}\r\n            className={`px-3 py-1 rounded border ${\r\n              filter === 'all' \r\n                ? 'bg-gray-800 text-white border-gray-800' \r\n                : 'bg-white text-gray-800 border-gray-300 hover:bg-gray-100'\r\n            }`}\r\n          >\r\n            All Logs\r\n          </button>\r\n          <button\r\n            onClick={() => setFilter('movie')}\r\n            className={`px-3 py-1 rounded border ${\r\n              filter === 'movie' \r\n                ? 'bg-gray-800 text-white border-gray-800' \r\n                : 'bg-white text-gray-800 border-gray-300 hover:bg-gray-100'\r\n            }`}\r\n          >\r\n            Movie Logs\r\n          </button>\r\n          <button\r\n            onClick={() => setFilter('user')}\r\n            className={`px-3 py-1 rounded border ${\r\n              filter === 'user' \r\n                ? 'bg-gray-800 text-white border-gray-800' \r\n                : 'bg-white text-gray-800 border-gray-300 hover:bg-gray-100'\r\n            }`}\r\n          >\r\n            User Logs\r\n          </button>\r\n          <button\r\n            onClick={() => setFilter('error')}\r\n            className={`px-3 py-1 rounded border ${\r\n              filter === 'error' \r\n                ? 'bg-gray-800 text-white border-gray-800' \r\n                : 'bg-white text-gray-800 border-gray-300 hover:bg-gray-100'\r\n            }`}\r\n          >\r\n            Error Logs\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"bg-white rounded-lg shadow overflow-hidden\">\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"min-w-full divide-y divide-gray-200\">\r\n            <thead className=\"bg-gray-50\">\r\n              <tr>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Type</th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Message</th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">User</th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Timestamp</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"bg-white divide-y divide-gray-200\">\r\n              {logs.length === 0 ? (\r\n                <tr>\r\n                  <td colSpan=\"4\" className=\"px-6 py-4 text-center text-gray-500\">\r\n                    No logs found\r\n                  </td>\r\n                </tr>\r\n              ) : (\r\n                logs.map((log) => (\r\n                  <tr key={log.id} className=\"hover:bg-gray-50\">\r\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                      <span className={`px-2 py-1 text-xs rounded-full border ${getTypeBadgeColor(log.type)}`}>\r\n                        {getTypeLabel(log.type)}\r\n                      </span>\r\n                    </td>\r\n                    <td className=\"px-6 py-4\">\r\n                      <div className=\"text-sm text-gray-900\">{log.message}</div>\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                      <div className=\"text-sm text-gray-500\">{log.user}</div>\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\r\n                      {formatDate(log.timestamp)}\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminLogs; "],"names":["AdminLogs","logs","setLogs","useState","loading","setLoading","error","setError","filter","setFilter","useEffect","async","Promise","resolve","setTimeout","mockLogs","id","type","message","timestamp","user","filteredLogs","log","includes","console","fetchLogs","getTypeLabel","_jsxs","className","children","_jsx","map","i","onClick","length","colSpan","dateString","Date","toLocaleDateString","year","month","day","hour","minute"],"sourceRoot":""}